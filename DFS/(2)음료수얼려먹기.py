# N * M 크기의 얼음 틀이 있다. 구멍이 뚫려 있는 부분은 0 이고 칸막이가 존재하는 부분은 1이다. 
# 즉, 0으로 연결된 부분이 얼음 한 덩이가 얼려져 나오는 것이다. 구멍이 뚫려 있는 부분 끼리 
# 상, 하, 좌, 우로 붙어 있는 경우가 서로 연결된 경우가 된다.
# 이때 얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성하시오.

# 입력 조건
# 첫 번째 줄에 얼음 틀의 세로와 가로길이 N, M이 주어진다. (1 <= N, M <= 1,000)
# 두 번째 줄부터 N + 1 번째 줄까지 얼음 틀의 형태가 주어진다.
# 이때 구멍이 뚫려있는 부분은 0, 아닌 부분은 1이다.

# 출력 조건 
# 한 번에 만들 수 있는 아이스크림의 개수를 출력한다.

# 특정한 지점의 주변 상, 하, 좌, 우를 살펴본 뒤 주변 지점 중에서 값이 '0'이면서 
# 아직 방문하지 않은 지점이 있다면 해당 지점을 방문한다. 방문한 지점에서 다시
# 상, 하, 좌, 우를 살펴보면서 방문을 다시 실행하면, 연결된 모든 지점을 방문할 수 있다.

n, m = map(int, input().split())
graph = []
for _ in range(n):
    graph.append(list(map(int, input())))

# DFS로 특정한 노드를 방문한 뒤에 연결된 모든 노드들도 방문
def dfs(x, y):
    # 주어진 범위를 벗어나는 경우 즉시 종료
    if x <= -1 or x >= n or y <= -1 or y >= m:
        return False
    # 현재 노드를 아직 방문하지 않았다면 해당 노드를 방문처리(1로 만듦)
    if graph[x][y] == 0:
        graph[x][y] = 1
        dfs(x-1, y)
        dfs(x, y-1)
        dfs(x+1, y)
        dfs(x, y+1)
        return True
    return False

# 모든 노드에 대해 음료수 채우기 
result = 0
for i in range(n):
    for j in range(m):
        if dfs(i, j) == True:
            result += 1

print(result)
